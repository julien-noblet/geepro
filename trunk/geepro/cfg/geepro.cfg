/*
    Default configuration file for geepro
*/

#define TEST_DEVICES
//#include "config.const"
#define IFACE_DUMMY	1
#define IFACE_RS232	2
#define IFACE_LPT	3
#define IFACE_USB	4
#define IFACE_FIREWIRE	5
#define IFACE_ETH	6
#define IFACE_PS2	7

#define ANY		-1
#define YES		1
#define NO		0

lang = auto;
shared_path = ".:/usr/share/geepro";
store_vars_dir  = "~/.geepro";
store_vars_file = "geepro.st";    
driver = "willem";

docfile = "./doc/doc_eng.txt";

shared_drv_xml_path = "file://$shared_path/drivers/$driver.xml";


/*************************************************************************************************************************************************************
*   Drivers configuration section
*   drivers = {
*	drv_path = string; // path to drivers directory
*	xml_path = string; // path to xml directory
*	driver = {
*           name = string;  // driver name
*	    xml  = string;  // xml file name
*           chips = string; // list of supported chips
*           flags  = int;    // 1 - enabled, 0 - disabled
*	};
*   };
*/

#define WILLEM_CHIPS "prom:mcs51:mcs48:exampl:93Cxx:27xx:24Cxx:28xx:hub_lpc:29xx:25xx:i2c_peripheral"

drivers = {
    drv_path = "./drivers";
    xml_path = "./drivers";	
    driver = {
	name = "WILLEM 4.0";
	xml  = "willem.xml"; 
	chips = WILLEM_CHIPS;
	flags = 1;
    };

    driver = {
	name = "WILLEM PRO 2";
	xml  = "willem.xml"; 
	chips = WILLEM_CHIPS;
	flags = 1;
    };
    driver = {
	name = "PCB 3";
	xml  = "willem.xml"; 
	chips = WILLEM_CHIPS;
	flags = 1;
    };
    driver = {
	name = "JTAG Xilinx cable III";
	xml  = "xilinx_cable_iii.xml"; 
	flags = 1;
    };
    driver = {
	name = "STK200";
	xml  = "stk200.xml"; 
	flags = 1;
    };
    driver = {
	name = "memSIM";
	xml  = "memsim.xml"; 
	flags = 1;
    };
    driver = {
	name = "JTAG - unknown name";
	xml  = "jtag_noname.xml"; 
	flags = 1;
    };
    driver = {
	name = "GALBlast";
	xml  = "galblast.xml"; 
	flags = 1;
    };
    driver = {
	name = "Funprog";
	xml  = "funprog.xml"; 
	flags = 1;
    };
    driver = {
	name = "JATG Altera byteblaster";
	xml  = "altera_byteblaster.xml"; 
	flags = 1;
    };
};


/*************************************************************************************************************************************************************
*   Serial ports. Config data structure:
*   device = {
*	path  = string;   // mandatory - path in the system eg "/dev/ttyS0"
*	alias = string;   // mandatory - geepro name of device
*   };
*/

serial_devices = {
    device = {
	path  = "/dev/ttyS0";
	alias = "COM 1";
    };
    device = {
	path  = "/dev/ttyS1";
	alias = "COM 2";
    };
    device = {
	path  = "/dev/ttyS2";
	alias = "COM 3";
    };
    device = {
	path  = "/dev/ttyS3";
	alias = "COM 4";
    };
};

/*************************************************************************************************************************************************************
*   Parallel ports. Config data structure:
*   device = {
*	path  = string;   // mandatory - path in the system eg "/dev/parport0"
*	alias = string;   // mandatory - geepro name of device
*	flags = int;      // mandatory - additional flags for open device 
*   };
*/

parport_devices = {
    device = {
	path  = "/dev/parport0";
	alias = "LPT 1";
	flags = 0;
    };
    device = {
	path  = "/dev/parport1";
	alias = "LPT 2";
	flags = 0;
    };
    device = {
	path  = "/dev/parport2";
	alias = "LPT 3";
	flags = 0;
    };
};

/*************************************************************************************************************************************************************
*   Compatible USB devices recognized by geepro. Config data structure:
*   device = {
*	vendor_id  = int; // mandatory - vendor id is a part of USB device key identifier
*	product_id = int; // mandatory - product id is a part of USB device key identifier
*	alias  = string;  // mandatory - name that appears on menu list to be choosed
*	class  = int;     // mandatory - interface type ( in most cases it will be IFACE_USB, but it also can be eg IFACE_LPT if device emulates LPT )
*	drivers = string; // mandatory - comma separated programmer's list that support USB device. or "ANY" for all
*	class_id   = int; // optional  - product classification, for unspecified class value is 0xff
*	serial = string;  // optional  - serial number of device
*	device = string;  // optional  - device name returned by device 
*	vendor = string;  // optional  - vendor name returned by device 
*	bus    = int;     // optional  - device bus number. Identify connection point to USB.
*	address = int;    // optional  - device address on bus
*	option  = int;    // optional  - additional flags for driver
*   };
*/

usb_devices = {
    device ={
	vendor_id  = 0x16c0;
	product_id = 0x05dc;
//	class_id   = 0xff;
	vendor = "Geepro";
	device = "USB2Lpt";
	alias  = "Usb to LPT adapter";
	class  = IFACE_LPT;
	drivers = "WILLEM 4.0,JTAG Altera byteblaster";
	option = 1;
    };
    device ={
	vendor_id  = 0x16c0;
	product_id = 0x05dc;
//	class_id   = 0xff;
	device = "USBasp";
	alias  = "USBasp";
	class  = IFACE_USB;
	drivers = "USBasp";
    };
#ifdef TEST_DEVICES
    device ={
	vendor_id  = 0x1822;
	product_id = 0x3202;
	device = "VP7041";
	alias  = "Hotplug test";
	class  = IFACE_RS232;
    };
#endif
};


/*************************************************************************************************************************************************************
*    Chip plugin
*/

chip_plugins = {
    // file path to chip plugins directory
    path = "./chips";
    // allowed plugins
    plugins = "prom:mcs51:mcs48:exampl:93Cxx:27xx:24Cxx:28xx:hub_lpc:29xx:25xx:i2c_peripheral";
};

